{"version":3,"sources":["components/CarMakeList.module.css","components/CarModelListComponent.module.css","stores/helpers/store-context.ts","stores/helpers/use-store.ts","components/CarMake.tsx","components/CarMakeList.tsx","components/CarModelComponent.tsx","components/CarModelListComponent.tsx","App.tsx","serviceWorker.ts","stores/data/car-makes/make.ts","stores/data/car-makes/make-store.ts","stores/data/car-models/car-model.ts","stores/data/car-models/car-model-store.ts","stores/data/data-store.ts","index.tsx","stores/helpers/create-store.ts","stores/root-store.ts"],"names":["module","exports","StoreContext","createContext","StoreProvider","Provider","useStores","useContext","CarMake","make","useEffect","setEditMake","name","setEditAbreviation","abreviation","useState","editMake","editAbreviation","editMode","setEditMode","Fragment","TableRow","TableCell","id","align","type","value","onChange","e","target","Button","onClick","editFields","variant","className","aria-hidden","useStyles","makeStyles","pageContent","padding","head","fontWeight","CarMakeList","headCells","label","disableSorting","pages","page","setPage","rowsPerPage","setRowsPerPage","order","setOrder","orderBy","setOrderBy","fn","items","filterFn","setFilterFn","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","descendingComparator","a","b","handleSearch","filter","x","toLowerCase","includes","makesAfterPagingAndSorting","array","comparator","stabilizedThis","map","el","index","sort","stableSort","makeStore","allMakes","getComparator","slice","dataStores","classesMUI","useObserver","classes","tableContainer","Paper","Toolbar","TextField","InputProps","startAdornment","InputAdornment","position","Search","TableContainer","Table","TableHead","element","key","sortDirection","TableSortLabel","active","direction","cellId","TableBody","TablePagination","rowsPerPageOptions","component","count","length","onChangePage","onChangeRowsPerPage","CarModelComponent","model","setMakeId","makeId","setModelName","modelName","setModelAbrv","modelAbrv","editModelFields","CarModelListComponent","modelStore","carModels","carModel","App","to","exact","path","Boolean","window","location","hostname","match","continuousId","Make","this","observable","action","MakeStore","rootStore","makeList","push","computed","CarModel","CarModelStore","DataStore","forEach","createMake","createModel","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.060c301b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"CarMakeList_tableContainer__1vyOE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"CarModelListComponent_tableContainer__XO4sI\"};","import { createContext } from 'react';\r\nimport RootStore from '../root-store';\r\n\r\nexport const StoreContext = createContext<RootStore>({} as RootStore);\r\nexport const StoreProvider = StoreContext.Provider;","import { useContext } from 'react';\r\nimport RootStore from '../root-store';\r\nimport { StoreContext } from './store-context';\r\n\r\nexport const useStores = () => {\r\n  return useContext<RootStore>(StoreContext);\r\n}","import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport Make from '../stores/data/car-makes/make';\r\nimport './CarMake.css';\r\nimport { TableRow, TableCell, Button } from '@material-ui/core';\r\n\r\ninterface Props {\r\n  make: Make\r\n}\r\n\r\nconst CarMake: FunctionComponent<Props> = ({ make }) => {\r\n  useEffect(() => {\r\n    setEditMake(make.name);\r\n  }, [make.name]);\r\n\r\n  useEffect(() => {\r\n    setEditAbreviation(make.abreviation);\r\n  }, [make.abreviation]);\r\n\r\n  const [editMake, setEditMake] = useState('');\r\n  const [editAbreviation, setEditAbreviation] = useState('');\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {editMode ?\r\n        <TableRow>\r\n          <TableCell>{make.id}</TableCell>\r\n          <TableCell align=\"right\"><input type=\"text\" value={editMake} onChange={e => setEditMake(e.target.value)} /></TableCell>\r\n          <TableCell align=\"right\"><input type=\"text\" value={editAbreviation} onChange={e => setEditAbreviation(e.target.value)} /></TableCell>\r\n          <TableCell align=\"right\">\r\n            <Button onClick={() => { setEditMode(false); make.editFields(editMake, editAbreviation) }} variant=\"outlined\">\r\n              Save\r\n            </Button>\r\n          </TableCell>\r\n        </TableRow>\r\n        :\r\n        <TableRow>\r\n          <TableCell>{make.id}</TableCell>\r\n          <TableCell align=\"right\">{make.name}</TableCell>\r\n          <TableCell align=\"right\">{make.abreviation}</TableCell>\r\n          <TableCell align=\"right\">\r\n            <i\r\n              className=\"fa fa-pencil-square-o addHoverHand\"\r\n              aria-hidden=\"true\"\r\n              onClick={() => setEditMode(true)}\r\n            ></i>\r\n          </TableCell>\r\n        </TableRow>\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default CarMake;","import React, { useState } from 'react';\r\nimport { useObserver } from 'mobx-react';\r\nimport { useStores } from '../stores/helpers/use-store';\r\nimport CarMake from './CarMake';\r\nimport Make from '../stores/data/car-makes/make';\r\nimport classes from './CarMakeList.module.css';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Table, TextField, Toolbar, TableSortLabel, Paper, InputAdornment,\r\n  TableCell, TableContainer, TableBody, TableHead, TablePagination, TableRow\r\n} from '@material-ui/core';\r\nimport { Search } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles({\r\n  pageContent: {\r\n    padding: \"25px 0px\"\r\n  },\r\n  head: {\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nfunction CarMakeList() {\r\n  interface HeadCell {\r\n    id: string;\r\n    label: string;\r\n    disableSorting: boolean\r\n  }\r\n\r\n  const headCells: HeadCell[] = [\r\n    { id: 'id', label: 'Id', disableSorting: false },\r\n    { id: 'name', label: 'Name', disableSorting: false },\r\n    { id: 'abreviation', label: 'Abrv', disableSorting: false },\r\n    { id: 'actions', label: 'Actions', disableSorting: true }\r\n  ];\r\n\r\n  const pages = [5, 10, 25];\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(pages[page]);\r\n  const [order, setOrder] = useState('');\r\n  const [orderBy, setOrderBy] = useState('');\r\n  const [filterFn, setFilterFn] = useState({ fn: (items: Make[]) => { return items } });\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  }\r\n\r\n  const stableSort = (array: any, comparator: any) => {\r\n    const stabilizedThis = array.map((el: any, index: any) => [el, index]);\r\n    stabilizedThis.sort((a: any, b: any) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el: [Make, number]) => el[0]);\r\n  }\r\n\r\n  function getComparator(order: string, orderBy: string) {\r\n    return order === 'desc'\r\n      ? (a: any, b: any) => descendingComparator(a, b, orderBy)\r\n      : (a: any, b: any) => -descendingComparator(a, b, orderBy)\r\n  }\r\n\r\n  function descendingComparator(a: any, b: any, orderBy: string) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const handleSearch = (e: { target: any; }) => {\r\n    let target = e.target;\r\n    setFilterFn({\r\n      fn: (items: Make[]) => {\r\n        if (target.value === \"\")\r\n          return items;\r\n        else\r\n          return items.filter(x => x.name.toLowerCase().includes(target.value))\r\n      }\r\n    })\r\n  }\r\n\r\n  const makesAfterPagingAndSorting = () => {\r\n    return stableSort(\r\n      filterFn.fn(makeStore.allMakes),\r\n      getComparator(order, orderBy)).slice(page * rowsPerPage, (page + 1) * rowsPerPage\r\n      );\r\n  }\r\n\r\n  const handleSortRequest = (cellId: string) => {\r\n    const isAsc = orderBy === cellId && order === \"asc\";\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(cellId);\r\n  }\r\n\r\n  const { dataStores: { makeStore } } = useStores();\r\n\r\n  const classesMUI = useStyles();\r\n\r\n  return useObserver(() => {\r\n    return (\r\n      <div className={classes.tableContainer}>\r\n        <Paper className={classesMUI.pageContent}>\r\n          <Toolbar>\r\n            <TextField\r\n              label=\"Search makes\"\r\n              variant=\"outlined\"\r\n              InputProps={{\r\n                startAdornment: <InputAdornment position=\"start\"><Search /></InputAdornment>,\r\n              }}\r\n              onChange={handleSearch}\r\n            />\r\n\r\n          </Toolbar>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {headCells.map(element => (\r\n                    <TableCell\r\n                      key={element.id}\r\n                      className={classesMUI.head}\r\n                      // @ts-ignore\r\n                      sortDirection={orderBy === element.id ? order : false}\r\n                      align={element.id === 'id' ? 'left' : 'right'}\r\n                    >\r\n                      { element.disableSorting\r\n                        ? element.label\r\n                        :\r\n                        <TableSortLabel\r\n                          active={orderBy === element.id}\r\n                          // @ts-ignore\r\n                          direction={orderBy === element.id ? order : \"asc\"}\r\n                          onClick={() => handleSortRequest(element.id)}\r\n                        >\r\n                          {element.label}\r\n                        </TableSortLabel>\r\n                      }\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {makesAfterPagingAndSorting().map((make: Make) => <CarMake make={make} key={make.id} />)}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TablePagination\r\n            rowsPerPageOptions={pages}\r\n            page={page}\r\n            component=\"div\"\r\n            rowsPerPage={rowsPerPage}\r\n            count={makeStore.allMakes.length}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          />\r\n        </Paper>\r\n      </div >\r\n    )\r\n  })\r\n}\r\n\r\nexport default CarMakeList;","import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport CarModel from '../stores/data/car-models/car-model';\r\nimport { TableRow, TableCell, Button } from '@material-ui/core';\r\n\r\ninterface Props {\r\n  model: CarModel\r\n}\r\n\r\nconst CarModelComponent: FunctionComponent<Props> = ({ model }) => {\r\n\r\n  useEffect(() => { setMakeId(model.makeId); }, [model.makeId]);\r\n\r\n  useEffect(() => { setModelName(model.modelName); }, [model.modelName]);\r\n\r\n  useEffect(() => { setModelAbrv(model.modelAbrv); }, [model.modelAbrv]);\r\n\r\n  const [makeId, setMakeId] = useState('');\r\n  const [modelName, setModelName] = useState('');\r\n  const [modelAbrv, setModelAbrv] = useState('');\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      { editMode ?\r\n        <TableRow>\r\n          <TableCell>{model.id}</TableCell>\r\n          <TableCell align=\"right\"><input type=\"text\" value={makeId} onChange={e => setMakeId(e.target.value)} /></TableCell>\r\n          <TableCell align=\"right\"><input type=\"text\" value={modelName} onChange={e => setModelName(e.target.value)} /></TableCell>\r\n          <TableCell align=\"right\"><input type=\"text\" value={modelAbrv} onChange={e => setModelAbrv(e.target.value)} /></TableCell>\r\n          <TableCell align=\"right\">\r\n            <Button onClick={() => { setEditMode(false); model.editModelFields(makeId, modelName, modelAbrv) }} variant=\"outlined\">\r\n              Save\r\n            </Button>\r\n          </TableCell>\r\n        </TableRow>\r\n        :\r\n        <TableRow>\r\n          <TableCell>{model.id}</TableCell>\r\n          <TableCell align=\"right\">{model.makeId}</TableCell>\r\n          <TableCell align=\"right\">{model.modelName}</TableCell>\r\n          <TableCell align=\"right\">{model.modelAbrv}</TableCell>\r\n          <TableCell align=\"right\">\r\n            <i\r\n              className=\"fa fa-pencil-square-o addHoverHand\"\r\n              aria-hidden=\"true\"\r\n              onClick={() => setEditMode(true)}\r\n            ></i>\r\n          </TableCell>\r\n        </TableRow>\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default CarModelComponent;","import React, { useState } from 'react';\r\nimport { useObserver } from 'mobx-react';\r\nimport { useStores } from '../stores/helpers/use-store';\r\nimport CarModel from '../stores/data/car-models/car-model';\r\nimport CarModelComponent from './CarModelComponent';\r\nimport classes from './CarModelListComponent.module.css';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Table, TextField, Toolbar, TableSortLabel, Paper, InputAdornment,\r\n  TableCell, TableContainer, TableBody, TableHead, TablePagination, TableRow\r\n} from '@material-ui/core';\r\nimport { Search } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles({\r\n  pageContent: {\r\n    padding: \"25px 0px\"\r\n  },\r\n  head: {\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nconst CarModelListComponent = () => {\r\n  interface HeadCell {\r\n    id: string;\r\n    label: string;\r\n    disableSorting: boolean\r\n  }\r\n\r\n  const headCells: HeadCell[] = [\r\n    { id: 'id', label: 'Id', disableSorting: false },\r\n    { id: 'makeId', label: 'Make Id', disableSorting: false },\r\n    { id: 'modelName', label: 'Model name', disableSorting: false },\r\n    { id: 'modelAbrv', label: 'Model abreviation', disableSorting: false },\r\n    { id: 'actions', label: 'Actions', disableSorting: true }\r\n  ];\r\n\r\n  const pages = [5, 10, 25];\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(pages[page]);\r\n  const [order, setOrder] = useState('');\r\n  const [orderBy, setOrderBy] = useState('');\r\n  const [filterFn, setFilterFn] = useState({ fn: (items: CarModel[]) => { return items } });\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  }\r\n\r\n  const stableSort = (array: any, comparator: any) => {\r\n    const stabilizedThis = array.map((el: any, index: any) => [el, index]);\r\n    stabilizedThis.sort((a: any, b: any) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el: [CarModel, number]) => el[0]);\r\n  }\r\n\r\n  function getComparator(order: string, orderBy: string) {\r\n    return order === 'desc'\r\n      ? (a: any, b: any) => descendingComparator(a, b, orderBy)\r\n      : (a: any, b: any) => -descendingComparator(a, b, orderBy)\r\n  }\r\n\r\n  function descendingComparator(a: any, b: any, orderBy: string) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const handleSearch = (e: { target: any; }) => {\r\n    let target = e.target;\r\n    setFilterFn({\r\n      fn: (items: CarModel[]) => {\r\n        if (target.value === \"\")\r\n          return items;\r\n        else\r\n          return items.filter(x => x.modelName.toLowerCase().includes(target.value))\r\n      }\r\n    })\r\n  }\r\n\r\n  const makesAfterPagingAndSorting = () => {\r\n    return stableSort(\r\n      filterFn.fn(modelStore.carModels),\r\n      getComparator(order, orderBy)).slice(page * rowsPerPage, (page + 1) * rowsPerPage\r\n      );\r\n  }\r\n\r\n  const handleSortRequest = (cellId: string) => {\r\n    const isAsc = orderBy === cellId && order === \"asc\";\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(cellId);\r\n  }\r\n\r\n  const { dataStores: { modelStore } } = useStores();\r\n\r\n  const classesMUI = useStyles();\r\n\r\n  return useObserver(() => {\r\n    return (\r\n      <div className={classes.tableContainer}>\r\n        <Paper className={classesMUI.pageContent}>\r\n          <Toolbar>\r\n            <TextField\r\n              label=\"Search models\"\r\n              variant=\"outlined\"\r\n              InputProps={{\r\n                startAdornment: <InputAdornment position=\"start\"><Search /></InputAdornment>,\r\n              }}\r\n              onChange={handleSearch}\r\n            />\r\n\r\n          </Toolbar>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {headCells.map(element => (\r\n                    <TableCell\r\n                      key={element.id}\r\n                      className={classesMUI.head}\r\n                      // @ts-ignore\r\n                      sortDirection={orderBy === element.id ? order : false}\r\n                      align={element.id === 'id' ? 'left' : 'right'}\r\n                    >\r\n                      { element.disableSorting\r\n                        ? element.label\r\n                        :\r\n                        <TableSortLabel\r\n                          active={orderBy === element.id}\r\n                          // @ts-ignore\r\n                          direction={orderBy === element.id ? order : \"asc\"}\r\n                          onClick={() => handleSortRequest(element.id)}\r\n                        >\r\n                          {element.label}\r\n                        </TableSortLabel>\r\n                      }\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {makesAfterPagingAndSorting().map((carModel: CarModel) => <CarModelComponent model={carModel} key={carModel.id} />)}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TablePagination\r\n            rowsPerPageOptions={pages}\r\n            page={page}\r\n            component=\"div\"\r\n            rowsPerPage={rowsPerPage}\r\n            count={modelStore.carModels.length}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          />\r\n        </Paper>\r\n      </div >\r\n    )\r\n  })\r\n}\r\n\r\nexport default CarModelListComponent;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, NavLink, Switch, Redirect } from \"react-router-dom\";\nimport CarMakeList from './components/CarMakeList';\nimport CarModelListComponent from './components/CarModelListComponent';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n\n        <nav className=\"navigetion\">\n          <NavLink className=\"navigetionLink\" to=\"/makes\">Makes</NavLink>\n          <NavLink className=\"navigetionLink\" to=\"/models\">Models</NavLink>\n        </nav>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/makes\" />\n          </Route>\n          <Route path=\"/makes\">\n            <CarMakeList />\n          </Route>\n          <Route path=\"/models\">\n            <CarModelListComponent />\n          </Route>\n        </Switch>\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { action, observable} from 'mobx';\r\n\r\nlet continuousId = 0;\r\n\r\nexport default class Make {\r\n  id: number;\r\n  @observable\r\n  name: string;\r\n  @observable\r\n  abreviation: string;\r\n\r\n  constructor( name: string, abreviation: string) {\r\n    this.id = continuousId++;\r\n    this.name = name;\r\n    this.abreviation = abreviation;\r\n  }\r\n\r\n  @action\r\n  editFields(name: string, abreviation: string) {\r\n    this.name = name;\r\n    this.abreviation = abreviation;\r\n  }\r\n\r\n}","import { action, computed, observable } from 'mobx';\r\nimport RootStore from '../../root-store';\r\nimport Make from './make';\r\n\r\nexport default class MakeStore{\r\n  @observable\r\n  makeList: Make[] = [];\r\n\r\n  rootStore: RootStore;\r\n\r\n  constructor( rootStore: RootStore ) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @computed\r\n  get allMakes() {\r\n    return this.makeList.slice();\r\n  }\r\n\r\n  @action\r\n  createMake (name: string, abreviation: string) {\r\n    this.makeList.push(new Make(name, abreviation));\r\n  }\r\n}","import { action, observable } from \"mobx\";\r\n\r\nlet continuousId = 0;\r\n\r\nexport default class CarModel {\r\n  id: number;\r\n  @observable\r\n  makeId: string;\r\n  @observable\r\n  modelName: string;\r\n  @observable\r\n  modelAbrv: string;\r\n\r\n  constructor(makeId: string, modelName: string, modelAbrv: string) {\r\n    this.id = continuousId++;\r\n    this.makeId = makeId;\r\n    this.modelName = modelName;\r\n    this.modelAbrv = modelAbrv;\r\n  }\r\n\r\n  @action\r\n  editModelFields(makeId: string, modelName: string, modelAbrv: string) {\r\n    this.makeId = makeId;\r\n    this.modelName = modelName;\r\n    this.modelAbrv = modelAbrv;\r\n  }\r\n}","import { action, computed, observable } from 'mobx';\r\nimport RootStore from '../../root-store';\r\nimport CarModel from './car-model';\r\n\r\nexport default class CarModelStore {\r\n  @observable\r\n  carModels: CarModel[] = [];\r\n\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @computed\r\n  get allMakes() {\r\n    return this.carModels.slice();\r\n  }\r\n\r\n  @action\r\n  createModel (makeId: string, modelName: string, modelAbrv: string) {\r\n    this.carModels.push(new CarModel(makeId, modelName, modelAbrv));\r\n  }\r\n\r\n}","import RootStore from \"../root-store\";\r\nimport MakeStore from \"./car-makes/make-store\";\r\nimport CarModelStore from \"./car-models/car-model-store\";\r\n\r\nexport default class DataStore {\r\n  makeStore: MakeStore;\r\n  modelStore: CarModelStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.makeStore = new MakeStore(rootStore);\r\n    this.modelStore = new CarModelStore(rootStore);\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from './stores/helpers/create-store';\nimport { StoreProvider } from './stores/helpers/store-context';\n\nconst rootStore = createStore();\n\nconst makes = [\n  { name: 'Volkswagen', abreviation: 'VW' },\n  { name: 'Aston Martin', abreviation: 'AM' },\n  { name: 'Alfa Romeo', abreviation: 'AR' },\n  { name: 'Audi', abreviation: 'Audi' },\n  { name: 'Bentley', abreviation: 'Bentley' },\n  { name: 'BMW', abreviation: 'BMW' },\n  { name: 'Dodge', abreviation: 'Dodge' },\n  { name: 'DS', abreviation: 'DS' },\n  { name: 'Ferrari', abreviation: 'Ferrari' },\n  { name: 'Fiat', abreviation: 'Fiat' },\n  { name: 'Ford', abreviation: 'Ford' },\n  { name: 'Land Rover', abreviation: 'LR' },\n  { name: 'Mercedes-Benz', abreviation: 'MB' }\n];\n\nconst models = [\n  { makeId: '1' , modelName: 'Passat', modelAbrv: 'Passat'},\n  { makeId: '1' , modelName: 'Golf', modelAbrv: 'Golf'},\n  { makeId: '1' , modelName: 'Polo', modelAbrv: 'Polo'},\n  { makeId: '1' , modelName: 'Sciroco', modelAbrv: 'Sciroco'},\n  { makeId: '1' , modelName: 'Arteon', modelAbrv: 'Arteon'},\n  { makeId: '2' , modelName: 'A4', modelAbrv: 'A4'},\n  { makeId: '3' , modelName: 'Continental', modelAbrv: 'Continental'},\n  { makeId: '4' , modelName: '458 Italia', modelAbrv: '458'},\n  { makeId: '4' , modelName: '599 Fiorano', modelAbrv: '599'},\n]\n\nmakes.forEach(element => {\n  rootStore.dataStores.makeStore.createMake(element.name, element.abreviation);\n})\n\nmodels.forEach(element => {\n  rootStore.dataStores.modelStore.createModel(element.makeId, element.modelName, element.modelAbrv);\n})\n\n//rootStore.dataStores.makeStore.createMake('Volkswagen', 'VW');\n//rootStore.dataStores.makeStore.createMake('Aston Martin', 'AM');\n\nReactDOM.render(\n  <StoreProvider value={rootStore}>\n    <App />\n  </StoreProvider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import RootStore from \"../root-store\";\r\n\r\nexport const createStore = () => {\r\n  return new RootStore();\r\n}","import DataStore from \"./data/data-store\";\r\n\r\nexport default class RootStore {\r\n  dataStores: DataStore;\r\n\r\n  constructor() {\r\n    this.dataStores = new DataStore(this);\r\n  }\r\n}"],"sourceRoot":""}